package pattern

import (
	"fmt"
	"os"
)

/*
	Реализовать паттерн «комманда».
Объяснить применимость паттерна, его плюсы и минусы, а также реальные примеры использования данного примера на практике.
	https://en.wikipedia.org/wiki/Command_pattern
*/

/*
Применимость:
1. Параметризация объектов выполняемым действием.
2. Постановка запросов в очередь и их выполнение в разное время.
3. Отмена операций.
4. Транзакции.
5. Протоколирование команд.

Плюсы:
1. Позволяет отделить код, вызывающий команду, от бизнес-логики.
2. С командами можно работать к с объектами.
3. Легкое добавление новых команд.
4. Команды могут хранить внутренее состояние и есть возможность их отмены.

Минусы:
1. Увеличивает сложность кода из-за дополнительных структур и интерфейсов. (Однако это лучше смешивания бизнес-логики с другими компонентами системы)

*/

/*
Например у нас етсь шелл, который имеет встроенные команды.
В нем есть компонент, который отвечает за поиск нужной команды и ее запуск.
Мы можем использовать паттерн команда, что бы убрать инвертировать зависимость между этим компонентом и командами.
*/

// Интерфейс команды, имеет один метод, который выполняет команду
type Command interface {
	Execute()
}

// Invoker, то есть сущность, которая будет запускать команды
// Интерпретирует пользовательский ввод и выполняет команды
type Interpreter struct {
	cmds map[string]Command
}

func NewInterpreter() *Interpreter {
	return &Interpreter{
		cmds: make(map[string]Command),
	}
}

// Настраиваем интепретатор, добавляем команды
func (i *Interpreter) AddCmd(name string, cmd Command) {
	i.cmds[name] = cmd
}

// Чтение и выполнение команд
func (i *Interpreter) Run() {
	for {
		var s string
		if _, err := fmt.Scan(&s); err != nil {
			return
		}
		i.cmds[s].Execute()
	}
}

// Команда, которая выводит приветствие
type HelloCmd struct {
	Name string
}

func (c *HelloCmd) Execute() {
	fmt.Printf("Hello, %s\n", c.Name)
}

// Команда, которая закрывает приложение
type ExitCmd struct{}

func (c *ExitCmd) Execute() {
	os.Exit(0)
}

// Клиент, который настраивает команды и инвокера
func initAndStartShell() {
	intrp := NewInterpreter()
	intrp.AddCmd("hello", &HelloCmd{"Eror"})
	intrp.AddCmd("exit", &ExitCmd{})
	intrp.Run()
}
